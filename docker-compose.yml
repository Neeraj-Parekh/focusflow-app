version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: focusflow-postgres
    environment:
      POSTGRES_DB: focusflow
      POSTGRES_USER: focusflow_user
      POSTGRES_PASSWORD: focusflow_password
      POSTGRES_INITDB_ARGS: "--auth-local=trust"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - focusflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U focusflow_user -d focusflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: focusflow-redis
    command: redis-server --appendonly yes --requirepass focusflow_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - focusflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.backend
    container_name: focusflow-backend
    environment:
      - DATABASE_URL=postgresql://focusflow_user:focusflow_password@postgres:5432/focusflow
      - REDIS_URL=redis://:focusflow_redis_password@redis:6379
      - SECRET_KEY=your-production-secret-key-change-this
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEBUG=false
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/ml_models:/app/ml_models
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - focusflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.frontend
    container_name: focusflow-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - focusflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Celery Worker (for background tasks)
  celery-worker:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.backend
    container_name: focusflow-celery-worker
    command: celery -A app.core.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://focusflow_user:focusflow_password@postgres:5432/focusflow
      - REDIS_URL=redis://:focusflow_redis_password@redis:6379
      - SECRET_KEY=your-production-secret-key-change-this
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/ml_models:/app/ml_models
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - focusflow-network
    restart: unless-stopped

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.backend
    container_name: focusflow-celery-beat
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://focusflow_user:focusflow_password@postgres:5432/focusflow
      - REDIS_URL=redis://:focusflow_redis_password@redis:6379
      - SECRET_KEY=your-production-secret-key-change-this
    volumes:
      - ./backend/uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - focusflow-network
    restart: unless-stopped

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: focusflow-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - focusflow-network
    restart: unless-stopped

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: focusflow-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3001:3000"
    networks:
      - focusflow-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  focusflow-network:
    driver: bridge